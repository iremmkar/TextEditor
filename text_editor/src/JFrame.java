import Singleton.Singleton;
import Strategy.OperationAlignRight;
import Strategy.OperationAlignLeft;
import Strategy.OperationAlignCenter;
import Strategy.Context;
import Command.UndoCommand;
import Command.Document;
import Command.Commander;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;


public class JFrame extends javax.swing.JFrame {
    /**
     * Creates new form JFrame
     */
    String filename;
    
    Document doc;
    UndoCommand u;
    Commander c;
    static Stack stack = new Stack();
    Singleton object= Singleton.getInstance();
 
    public JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu5 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jButtonFind = new javax.swing.JButton();
        jButtonChange = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuNew = new javax.swing.JMenuItem();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuUndo = new javax.swing.JMenuItem();
        jMenuIncorrect = new javax.swing.JMenuItem();
        jMenuSingleTransposition = new javax.swing.JMenuItem();
        jMenuAlignLeft = new javax.swing.JMenuItem();
        jMenuCenter = new javax.swing.JMenuItem();
        jMenuAlignRight = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();

        jMenu5.setText("jMenu5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextPane1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        jScrollPane2.setViewportView(jTextPane2);

        jScrollPane3.setViewportView(jTextPane3);

        jButtonFind.setText("Find");
        jButtonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });

        jButtonChange.setText("Change");
        jButtonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonChangeActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuNew.setText("New");
        jMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuNew);

        jMenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuOpen.setText("Open");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpen);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSave.setText("Save As");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuUndo.setText("Undo");
        jMenuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUndoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuUndo);

        jMenuIncorrect.setText("Show Incorrect Words");
        jMenuIncorrect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuIncorrectActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuIncorrect);

        jMenuSingleTransposition.setText("Correct Single-Transposition");
        jMenuSingleTransposition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSingleTranspositionActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuSingleTransposition);

        jMenuAlignLeft.setText("Align Left");
        jMenuAlignLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAlignLeftActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuAlignLeft);

        jMenuCenter.setText("Center");
        jMenuCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCenterActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuCenter);

        jMenuAlignRight.setText("Align Right");
        jMenuAlignRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAlignRightActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuAlignRight);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Search");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("View");
        jMenuBar1.add(jMenu4);

        jMenu6.setText("Help");
        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonFind)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonChange)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonFind, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonChange, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewActionPerformed
        // TODO add your handling code here:
        jTextPane1.setText("");
    }//GEN-LAST:event_jMenuNewActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        // TODO add your handling code here:
        FileDialog fileDialog = new FileDialog(JFrame.this, "Save File", FileDialog.SAVE);
        fileDialog.setVisible(true);
        if (fileDialog.getFile() != null) {
            filename = fileDialog.getDirectory() + fileDialog.getFile();
            setTitle(filename);
        }
        try {
            FileWriter fileWriter = new FileWriter(filename);
            fileWriter.write(jTextPane1.getText());
            setTitle(filename);
            fileWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuIncorrectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuIncorrectActionPerformed
        // TODO add your handling code here:
        try {
            File file = new File("metin.txt");
            Scanner dictionary = new Scanner(file);
            Scanner text = new Scanner(jTextPane1.getText());
            
            
            ArrayList<String> dictionaryList = new ArrayList<String>();
            while (dictionary.hasNextLine())
            {
                dictionaryList.add(dictionary.nextLine()); 
            }
            while (text.hasNextLine())
            {
                String textLine = text.nextLine().toLowerCase();
                String[] wordList = textLine.split("[.,; -]"); 
                
                for (int i =0 ; i< wordList.length ; i++)
                {
                    if(dictionaryList.indexOf(wordList[i])== -1 ) //kelimeyi sozluk listesinde arama
                    {
                        try
                        {
                            Integer.parseInt(wordList[i]);
                        }
                        catch(NumberFormatException e)
                        {
                            System.out.println("incorrect word: " + wordList[i]);
                        }
                    }
                }
            }

        } 
        catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuIncorrectActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        // TODO add your handling code here:
         FileDialog fileDialog = new FileDialog(JFrame.this, "Open File", FileDialog.LOAD);
        fileDialog.setVisible(true);

        if (fileDialog.getFile() != null) {
            filename = fileDialog.getDirectory() + fileDialog.getFile();
            setTitle(filename);
        }
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(filename));
            StringBuilder stringBuilder = new StringBuilder();

            String line = null;

            while ((line = bufferedReader.readLine()) != null) {
                stringBuilder.append(line + "\r\n");
                jTextPane1.setText(stringBuilder.toString());

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

                                       
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUndoActionPerformed
       
        //Command tasarım deseniyle "undo" işlemi yapmak
        doc = new Document(jTextPane1, stack);
        u = new UndoCommand( doc );
        c = new Commander( u);
        c.undoCom();

    }//GEN-LAST:event_jMenuUndoActionPerformed

    private void jMenuSingleTranspositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSingleTranspositionActionPerformed
        String[] kelimeler = jTextPane1.getText().split(" ");
        for(String a:kelimeler){
            System.out.println(a);
            }
        System.out.println(jTextPane1.getText());
        List<String> dict;
        try {
            dict = object.getSozluk();
            
            
            List<String> result = new ArrayList<>();
            for (String kelime : kelimeler) {
                if (!dict.contains(kelime)) {
                    String correction = checkTransposition(kelime, dict);
                    if(correction != null){
                        result.add(correction);
                    }
                    else{
                        result.add(kelime);
                    }
                }
                else{
                    result.add(kelime);
                }
            }
            System.out.println(result.toString());
            StringBuilder sb = new StringBuilder();
            for(String a : result){
                sb = sb.append(a).append(" ");
            }
            jTextPane1.setText(sb.toString());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuSingleTranspositionActionPerformed

    private void jButtonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindActionPerformed
        // TODO add your handling code here:
        String s[] = jTextPane1.getText().split("\\r?\\n"); 
        ArrayList<String> arrList = new ArrayList<String>(Arrays.asList(s));
        Lines lines = new Lines(arrList);
        lines.search(jTextPane2.getText());
        jTextPane1.setText(lines.get());
    }//GEN-LAST:event_jButtonFindActionPerformed

    private void jButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeActionPerformed
        // TODO add your handling code here:
        String s[] = jTextPane1.getText().split("\\r?\\n"); 
        ArrayList<String> arrList = new ArrayList<String>(Arrays.asList(s));
        Lines lines = new Lines(arrList);
        lines.change(jTextPane2.getText(), jTextPane3.getText());
        jTextPane1.setText(lines.get());
    }//GEN-LAST:event_jButtonChangeActionPerformed

    private void jTextPane1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyTyped
        
        //jTextPane1' den alınan metin stack'e atılır.
        stack.push(jTextPane1.getText());
    }//GEN-LAST:event_jTextPane1KeyTyped

    private void jMenuCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCenterActionPerformed
        Context context = new Context(new OperationAlignCenter());
        jTextPane1.setParagraphAttributes(context.Align(), true); //Strategy ile metin ortalanır
    }//GEN-LAST:event_jMenuCenterActionPerformed

    private void jMenuAlignLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAlignLeftActionPerformed
        Context context = new Context(new OperationAlignLeft());
        jTextPane1.setParagraphAttributes(context.Align(), true); //Strategy ile metin sola yatırılır
    }//GEN-LAST:event_jMenuAlignLeftActionPerformed

    private void jMenuAlignRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAlignRightActionPerformed
        Context context = new Context(new OperationAlignRight());
        jTextPane1.setParagraphAttributes(context.Align(), true); //strategy ile metin sağa yatırılır
    }//GEN-LAST:event_jMenuAlignRightActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

           public String checkTransposition(String target, List<String> sozluk) {
            for (String kelime : sozluk) {
                boolean singleTransposition = false;
                int missmatchCounter = 0;

                if (kelime.length() == target.length()) {
                    char[] targetCharList = target.toCharArray();
                    char[] kelimeCharList = kelime.toCharArray();
                    for (int i = 0; i < targetCharList.length; i++) {
                        char target_char = targetCharList[i];
                        if (kelimeCharList[i] != target_char) {
                            if (i != targetCharList.length - 1) {
                                if (missmatchCounter == 0) {
                                    if (!singleTransposition) {
                                        if (kelimeCharList[i + 1] == target_char
                                                && targetCharList[i + 1] == kelimeCharList[i]) {
                                            missmatchCounter++;
                                            i++;
                                            singleTransposition = true;
                                        } else {
                                            singleTransposition = false;
                                            break;
                                        }
                                    }
                                } else {
                                    singleTransposition = false;
                                    break;
                                }
                            }
                            else{
                                singleTransposition = false;
                            }
                        }
                    }
                    if (singleTransposition) {
                        return kelime;
                    }
                }
            }

            return null;
        }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonChange;
    private javax.swing.JButton jButtonFind;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuItem jMenuAlignLeft;
    private javax.swing.JMenuItem jMenuAlignRight;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCenter;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuIncorrect;
    private javax.swing.JMenuItem jMenuNew;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JMenuItem jMenuSingleTransposition;
    private javax.swing.JMenuItem jMenuUndo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
}
